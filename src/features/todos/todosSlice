import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from "@reduxjs/toolkit";
import { client } from "../../api/client";
import reducer from "../filters/filtersSlice";

const todosAdapter = createEntityAdapter;

const initialState = todosAdapter.getInitialState({
    status: 'idle'
})

export const fetchTodos = createAsyncThunk('todos/fetchTodos',async()=>{
    const response = await client.get('fakeApi/todos')
    return response.todos
})

export const saveNewTodos  = createAsyncThunk(
    'todos/saveNewTodo',
    async(text)=>{
        const initialTodo = {text}
        const response = await client.post('/fakeAPi/todos',{todos: initialTodo})
        return response.todo
    }   
)

const todoSlice = createSlice({
    name : 'todos',
    initialState,
    reducers:{
        todoToggled(state,action){
            const todoId = action.payload            
            const todo = state.entities[todoId]
            todo.completed = !todo.completed
        },
        todoColorSelected: {
            reducer (state,action) {
                const {color,todoId} = action.payload
                state.entites[todoId].color = color
            },
            prepare(todoId,color){
                return{
                    payload: {todoId,color},
                }
            },
        },
        todoDeleted : todosAdapter.removeOne,
        allTodoCompleted(state,action){
            Object.values(state.entites).forEach((todo)=>{
                todo.completed = true
            })
        },
        completedTodoCleared(state,action){
            const completedIds = Object.values(state.entites)
                .filter((todo) => todo.completed)
                .map((todo) => todo.id)
            todosAdapter.removeMany(state,completedIds)
        },
    },
    extraReducers: (builder)=>{
        builder
        .addCase(fetchTodos.pending, (state,action)=>{
            state.status = 'loading'
        })
        .addCase(fetchTodos.fulfilled,(state,action)=>{
            todosAdapter.setAll(state,action.payload)
            state.status = 'loading'
        })
        .addCase(saveNewTodos.fulfilled,todosAdapter.addOne)
    },
})

export const {
    allTodoCompleted,
    completedTodoCleared,
    todoAdded,
    todoColorSelected,
    todoDeleted,
    todoToggle,
}= todoSlice.actions

export default todoSlice.reducer

export const {
    selectAll:selectTodos,
    selectedById : selectedById
} = todosAdapter.getSelector((state)=>state.todos)

export const selectedTodoIds = createSelector(
    selectTodos,
    (todos) => todos.map((todo)=>todo.id)
)

export const selectFilterTodos = createSelector(
    selectTodos,
    (state) => state.filters,
    (todos,filter)=>{
        const {status,colors} = filter
        const showAllCompletions = status === StatusFilters.All
        if(showAllCompletions && colors.length === 0){
            return todos
        }
        const completedStatus = status === statusfilters.Completed

        return todos.filter((todo)=>{
            const statusMatches = 
            showAllCompletions || todos.completed === completedStatus
            const colorMatches = colors.length === 0 || colors.includes(todo.color)
            return statusMatches && colorMatches
        })
    }
)

export const selectedFilteredTodoIds = createSelector(
    selectFilterTodos,
    (filterTodos) => filterTodos.map((todo)=>todo.id)
)
